#计算机技术
1.Linux
    开关机
    文件操作
    用户操作
    软件包操作
    系统信息查看
    系统资源监控
    
2.数据库
数据库安装配置
添加
查询
修改
删除
备份还原

3. 计算机网络
TCP/IP原理
网络故障排查命令
常用网络设备的作用

4.编程语言
基础语法
常用第三方包、库

#软件测试技术
需求评审
测试用例设计编写  禅道和op
bug定位、编写、提交、验证  禅道和OP
测试环境搭建（web/pc/移动端）

#软件测试工具
1.测试管理工具
测试用例管理
bug管理
版本管理

2.功能自动化工具
QTP、selenium

3.性能自动化工具
LR/Jmeter

4.安全测试工具
APPScan

5.单元测试自动化工具
Junit

6.接口自动化工具
SoapUI/postman

7.测试辅助工具
协议分析（抓包）
fidder/tcpdump/httpdebugger/wireshark
远程登录与文件传送
xshell/putty/winscp

#项目经验
行业知识、业务知识
#交流沟通
面试技巧
测试用例
覆盖率
优先级
************************************************************



初识接口 原理分析  脚本研发项目实践 测试框架和设计实践 工作总结（最重要）

******************************接口测试实验任务小结******************************
######实验的需求：俩个整数之和

#####实验的目标：
1.what?  了解接口
2.why?   为什么进行接口测试？接口测试与其他自动化的区别？
3.what?  接口测试的原理
4.how?   接口测试的基本流程

#####工作小结：
#了解接口？
1.接口的主要组成元素
接口请求地址  请求方法 接口参数  接口返回值
2.接口的作用
规定了一些规则
规定好使用规则后，方便其他应用调用
保护程序内部的安全性
程序内部的变化对外部使用者没有任何影响

#为什么进行接口测试？接口测试与其他自动化的区别？
1.为什么要进行测试工作？

    1)必备的工作
        软件中存在很多接口 
        软件系统调用了其他系统接口
    2)提早开展测试
        接口只要定义好了，没有界面也是可以进行测试，通过接口测试工具或写接口测试代码
    3)早一点发现bug
        bug修复成本和风险大大下降
    4)提前确定接口是否正常实现
    5)早一点定位bug 
2.接口测试与其他自动化的区别?

    1.接口测试和UI测试的区别：原理不同
        UI:  元素定位 模拟手工操作   输入测试数据     获取输出结果
        接口：        模拟发送请求   传入接口数据     获取响应结果
    2.接口测试和性能测试的区别：目标不同
        接口：接口输入参数是否进行校验    响应结果是否符合接口设计要求
        性能：大数据量或大用户量访问时 系统能否正常工作 系统处理响应时间  服务器资源占用情况（cpu,内存，硬盘，网络）
    3.接口测试和单元测试的区别：对象不同
        单元：独立的代码内部逻辑是否正确
        接口：接口的实现和接口之间的调用是否正确

#接口测试的原理
1.协议：定义了在网络上进行数据传输的规则

    http协议的请求：
    请求行     方法         URL         版本
    请求头     头部域名称   头部域值
    空行
    消息主体   请求数据
    
    http协议的响应：
    请求行       版本         状态码     原因短语
    请求头       头部域名称   头部域值
    空行
    消息主体     响应正文

2.协议与接口的关系
    通过分析协议数据包来获取接口测试内容：请求地址/请求方法/接口参数/接口返回值
3.用什么进行抓接口数据包
    抓包工具（Fiddler/Wireshark/firebug/Httpwatch）
    
#接口测试的基本流程
1.准备接口测试环境
    被测环境部署
    测试环境部署  python pycharm  抓包工具（Fiddler/Wireshark/firebug/Httpwatch）
2.准备接口测试用例
3.确定接口测试数据相关需求
4.实现接口测试
    1.通过接口测试工具
    2.编写接口测试脚本
    3.设计并研发接口测试框架
5.发现bug,提交bug单
6.回归测试，修复bug

####思考题：
功能测试.j接口测试。单元测试/性能测试如何有效安排，统筹规划？
1.状态码？
1xx
2xx
3xx
4xx
5xx

******************************公司内部项目******************************
#接口测试准备工作
1.了解项目背景
    项目的应用范围（用户信息处理相关接口）
    接口测试的范围（接口的个数/名字/接口调用/参数/返回值）
    相关开发负责人和开发工程师
    项目的进度（决定测试工作的紧急程度）
2.收集项目相关资料
    接口说明文档/接口设计
    接口代码说明文档
    与开发沟通确认，生成测试成果物（测试说明，包括接口名称，请求地址，参数，返回值，方法）
    接口测试环境相关资料（部署环境文档/布署环境安装包）
    语言环境JDK 服务器Tomcat 数据库MySQL 接口测试工具Postman 抓包工具Fiddler
    1.搭建JDK（环境变量） JAVA HOME 和path    java -version
    2.Tomcat   解压后将.war包放进webapps中，双击startup.exe http://localhost:8080
    3.MySQL  安装数据库服务器端（root/123456)/客户端工具 导入数据库文件 数据库服务开启
    4.Postman Fiddler  通过postman访问接口

3.部署接口测试环境
4.接口测试相关成果物
5.接口测试采用的工具和技术
6.测试工作分工

#独立接口测试

1.确定
2.目标
    1.测试范围：用户模块
    2.测试标准:
    最低：正确的请求地址+正确的参数  获取正常的返回值
    正常：正常接口测试  同最低标准
          异常接口测试  接口参数异常校验（参数为空，类型/长度/内容不正确）
    较高：
        接口安全性测试  通过抓包工具能否获得关键敏感数据      
        接口性能测试    大量用户同时访问接口时接口响应时间
        接口兼容性测试  对外提供服务要考虑接口的使用范围（web/app)
    3.测试文档
        接口测试范围
        接口测试说明（等同接口测试用例）
        接口测试脚本
        接口测试框架
        接口测试的bug单
    4.测试方法
        1.postname+fiddler工具进行接口执行（尽快确认接口功能是否正常使用） 最低标准
        2.针对异常接口参数，先进行手工+工具测试
        3.后期bug基本修复成功了，代码稳定了，追加编写接口测试脚本，进行接口自动化回归测试
    5.测试分工  
    
3.第一阶段
    1.目标：确定接口功能是否正常实现
    2.方法：使用postman工具执行基本接口测试
    3.工作准备
    已完成所有接口测试说明文档并评审通过
    设定接口执行顺序（注册/登录...)
4.工作任务：
    1.接口说明文档1.0
    2.使用postman工具执行正常测试并记录测试结果 不清楚的先写下来

脚本及实现   
接口测试脚本实验1
    导入类库文件   
    v1.0 发送请求，获取响应结果
        定义接口请求地址
        通过requests对象调用post方法发送请求，并接受响应
        调试脚本
    v2.0 传入接口测试数据  
        定义字典类型进行接口参数赋值
        传入post方法中
        进行
    v3.0 对结果进行校验，得出测试结论
        调用find方法，查找返回的字符串是否存在对应的值
        判断语句得出测试结论
    v4.0 从文件中传入多组测试数据
        准备CSV文件
        读取csv文件中的测试数据（只读+循环）
        把测试数据放入字典中 
    v5.0 把每一组测试数据对应的测试结果放入测试报告中
        创建一个可写入的文件file2=open("","w")
        向文件中写入内容 file2.write("zhangsan"+","+"lis")
    如何把多个版本的程序进行迭代
        导入类库文件
        测试准备工作  打开文件，url,文件的读取
        接口测试执行 通过循环结构 读取一组测试数据进行测试执行，将测试结果进行分析，写入测试报告
接口测试脚本实验2
     面向对象思想设计正常注册接口测试
     
接口测试脚本实验3
属性 方法
     工作小结
     面向对象设计思路
        一个接口测试对应一个类文件
        接口请求地址作为属性
        测试数据如果时固定的也可以作为属性
        测试方法  发送请求  获取响应 比对结果
        在main方法中进行类的实例化
#复杂接口测试  
接口联调测试，就是按照业务要求，把接口进行组合测试
1.项目中的接口是多个
2.接口组合起来才能实现完整的业务
3.接口之间有些存在依赖关系

工作计划：
业务分析-》测试设计（先后顺序）-》使用postman工具-》编写测试脚本 -》工作总结

接口联调业务分析
1.对所有接口有一个全局认识
接口名称 功能 参数  返回值  列一个表格 
接口联调测试设计     用户找回密码业务
注册 登录 忘记密码 提交密保问题提示接口  
接口联调使用postman工具

web应用程序如何进行身份验证？
#############################身份验证##################################
http协议是无状态协议（无记忆）
虽然已登录成功，但重新打开一个页面后，相当于重新发送新的请求，服务器就无法判断用户是否登录
解决办法：
1.通过cookie文件登录保存用户的身份信息
在浏览器本地生成或更新cookie文件 发请求时会带上cookie 加密存储，可以删除，删除后重新登录再次生成 
有些系统也会通过cookie记录一些用户的操作习惯
2.通过session保存用户的相关信息  
登录后服务器校验用户合法后，会产生一个随机的session id发送给客户端，客户端随后发出的请求都会带上session id  
    有时效性，一般30分中，在代码中设计和实现  重新登录  访问新页面 session id 是否有效 
3.通过token保存用户的相关信息  
登录后服务器校验用户合法后，产生一个随机token令牌给客户端，访问新页面
      时效性    支持多平台
session只能在一个系统中使用，token可支持访问第三方网站或系统

接口测试的关系
接口说明参数  cookie session  token 

接口联调编写测试脚本
1.类的设计
一个接口一个类  （接口比较少）
一个接口一个方法 一个类对应多个测试方法  
2.接口脚本实现
3.一个接口进行一次调试

案例：
定义一个类 五个方法  一个方法对应一个接口测试 
参数 url接口请求地址 接口参数  返回值（只考虑正常接口数据的测试）
注意：提交密保问题答案接口的返回值 是 回答完密保问题后修改密码接口的输入参数

接口类图和接口流程图设计
工作总结
1.前期准备
所有接口的联调分析文档  请求地址 传入参数 预期响应结果
只进行正常数据的接口测试
2.脚本设计
类图  一个类多个方法  一个方法一个接口
流程图
3.脚本实现
定义类
定义一个方法调试一个
4.脚本调试
print打印中间数据 
5.如果发现bug，及时提交bug单和开发进行确认

接口联调测试脚本优化
v1.0
v2.0
共性：url/userinfo/预期输出都需要进行比对
结构优化价值：
大大提高了测试脚本的复用性 
降低了测试脚本的维护成本，只需要不断追加或替换相关的测试数据即可 
方便后续接口测试工作的扩展及测试执行
如何？
优化测试脚本类的设计
对通用的接口测试方法需要传入参数（url,接口参数，预期值，接口名称）
再依据接口测试说明传入相关的参数值
适用范围？
1.接口测试没有返回值，也没有特殊参数
2.接口请求方式一致
v3.0 再不同的python文件中进行接口模板列的实例化和调用
适合：多个接口测试开发工程师，同时编写不同的接口测试脚本，进行接口测试的执行
步骤？
1.创建
2.导入
3.main
v4.0脚本参数化
将参数放入csv文件
通过程序读取参数
传入接口测试脚本
v4.1解决相同参数的读取问题
v4.2参数个数不同的读取问题
1.准备数据文件
2.创建一个python文件
3.设计一个方法读取参数数据
4.传入参数
小结：脚本参数化
1.找到参数的规律
共同的参数：url/预期响应结果/接口名称
个性的参数：接口参数数据不同  循环规律：初始值 终止值 每次变化几个
存放入字典  
一次循环后要把字典清空 
价值：
以后的接口测试，只需要维护测试数据的文档，不需要修改代码
v5.0 编写接口测试报告
1.需要把几口响应结果和结论存入测试报告
2.测试报告设计  
接口名称 接口实际返回值 测试结论  
3.技术实验  字典数据
将字典数据写入csv文件中
resultdata={"实际返回值":response,"测试结论":"测试通过"，"接口名称":""}
每完成一组写入一条记录 
w   main方法
 a  单独写一个方法
 v6.0 
 1.一个脚本的程序可以对应若干条接口测试
 2.只需要维护测试数据就可以完成任意组接口的测试
 3.所有接口测试的结论自动生成测试报告文件
 
#接口联调测试工作总结
1.价值
    1.测试业务本身需要接口联调调用
    2.独立接口正确，但有可能接口联调时会报错
    3.提高接口测试脚本的复用性，降低接口脚本的维护成本
    4.为后续的测试框架的设计和实现做好准备工作
2.工作思路
    1.依据接口设计要求，完善所有接口的参数说明文档
    2.设计一个类及方法，先实现一个接口的测试
    3.逐步实现其他接口的类及方法的调试，实现一个调试一个
    4.脚本结构优化，提高脚本复用性
    5.脚本参数化，只需要维护测试数据，就能实现任意多个参数的测试
    6.编写测试报告
3.准备工作
4.测试数据设计
字典
5.脚本研发
6.常见问题
    1.注意脚本的请求方法及传参和返回值的特点，基本一致才可以进行脚本结构化
    2.测试数据的设计尽量统一，脚本和数据文档的设计要一致
    3.先进行技术实验，再进行脚本研发；先进行类和方法的设计，再进行具体实现。
    4.逐个编写，逐个调试；由简到繁，逐步优化，发现问题，加入print调试语句进行错误定位。

#接口联调测试工作总结
1.接口联调工作分析及设计
2.接口联调脚本设计
    类图的设计 类名称 属性 方法 （参数/返回值）
    流程的设计  获取访问地址 明确接口测试数据 向服务器发送请求 获取服务器短的响应结果 比对结果
    特殊注意：
        某些接口的测试参数来自于其他接口的实际返回值，
    测试过程中
        一旦发现接口的缺陷，即使进行bug报告的编写，及时提交开发进行审核或修复
3.技术
    类的定义
    类的引用（多人并行开发）

 #接口测试框架
 1.价值
    效率
        实现对所有测试脚本、测试数据文件以及测试报告文件的管理，提升接口测试执行和回归的效率
    成本
        降低人工的工作成本，可以在下班后通过框架来自动运行，提高单位人工的产能。
    复用
        框架可以应对多种不同的接口测试工作的需求，适用性和可扩展性强
    规范
        对接口测试成果物进行规范化处理，方便随时进行工作的开展以及成果物的查阅
 2.设计思路
    目标
        最终只需要调整框架配置文件的一些参数，不需要人工干预测试脚本的执行
    框架设计过程
        1.明确框架层次  
        配置层 框架的配置文件 csv
        脚本层 独立接口脚本 联调接口脚本
        数据层 独立接口数据 联调接口数据
        报告层 独立接口测试报告 联调  框架测试报告（框架运行过程中，运行了哪些接口测试脚本）
        2.对框架的设计进行评审
        3.创建框架对应的文件夹 英文
        4.把现有相关的成果物（脚本 测试数据文件  测试报告文件 框架配置文件）放入对应的文件夹
        5.框架的设计
        6.框架的实现
        7.框架的调试运行
        
#测试框架执行原理
框架程序 读取框架配置文件  需要执行哪些脚本  相关测试报告
unittest 测试框架设计原理
unittest框架  提供支持  框架程序
TextTestRunner  
TestCase  setup test_xxx assert  tearDown 
TestSuite Testcase1 Testcase2 

#框架设计实现 
v1.0
需求：通过unittest框架实现注册接口的测试
设计：定义测试类 要求必须继承unittest类  
实现：导入unittestcase类库  
        定义测试类，继承unittest.
        Testcase 测试方法必须test打头  
        在main函数中直接使用unittest.main（）即可
        加入测试断言 assertIn
        通过setup进行测试初始化
        通过teardown进行测试的回收工作（文件关闭）
v2.0 
需求：通过unittest可框架实现多接口联调测试
实现：导入unittestcase类库  
        定义测试类，继承unittest.
        通过setup进行测试初始化
        Testcase 测试方法必须test打头 按照asc码顺序执行
        使用测试套进行测试用例的执行 
            声明测试套对象 suite=unittest.TestSuite()
            把需要的执行的测试用例方法加入测试套中suite.addTest(测试类名称（"test_xxx"）)
            声明框架运行的对象 runner=unittest.TextTestRunner()
            通过runner对象执行测试套件 runner.run(suite)
            使用文件加载的方式进行测试用例的执行  执行一些python文件  
                步骤：1.声明文件路径 2.调用unittest对应的discover方法打开对应测试文件 3.声明runnser对象 4.执行指定的测试文件
v3.0
v4.0

#工作总结
三种框架运行方式的对比
1.unittest.main()
2.测试套件  
    suite=unittest.TestSuite() 
    suite.addTest(测试类(测试方法名)) 
    runner=unittest.TextTestRunner() 
    runner.run(suite)
    注意：运行模式要改为python文件而不是测试框架模式运行
3.测试文件执行 
    1.声明文件所在路径  
    2.定义discover对象打开相关的脚本文件 
    discover=unittest.defaultTestLoader.discover(文件路径，pattern="test_*.py")
    
  接口框架设计
  
    
自主研发接口测试框架
1.需求原型 
    框架目录结构 一般的目录结构
    框架各层需要完成的工作 
        1.配置层(config) 配置文件 由配置文件来控制需要调用哪些测试用例
        2.脚本层(script) 对立  联调   注意：文件名称有规范性
        3.测试数据文件层(testdatafile)   独立 联调  注意：数据文件命名  ind_ mul_
        4.测试报告文件层(testresultfile)  报告文件命名 fram_ ind_  mul_
        5.框架驱动层  存放测试框架的驱动程序  注意：fram_test_
    框架的测试执行过程
        1.由框架驱动层中的框架驱动程序运行
        2.依据配置层相关的设置，调用对应脚本层的程序，进行执行
        3.相关的脚本运行时，如果需要测试数据，则在数据层进行文件的读取
        4.测试脚本执行结束后，会写明相关的测试报告文件，并存入测试报告层
    最终目标
2.测试框架前期准备工作
    1.依据框架需求搭建框架项目及模块
    2.接口测试数据文件向框架转移
    
3.框架脚本的研发
    1.重构测试脚本
    2.改写现有测试脚本
#更新用户接口测试
1.在框架对应的分层下创建新的python文件
2.按照unittest框架的思想进行脚本的设计
    v1.0 导入unittest 定义一个类 传入固定的接口测试数据 assert进行判断 
    v2.0 是否需要测试数据文件
    v3.0 加入测试报告
3.更新接口测试分析
    正常（注意邮箱不能使用已存在的） 
        更新一个 email phone answer question
        更新多个 2组 3组
        更新全部  4组
    异常 
        未登录更新  
        邮箱冲突 
        电话的长度不正确 
        问题为空  
        答案为空

###############################文件路径#############################
系统对象 os                    import os
获取当前路径                   path=os.getcwd()
获取脚本文件对应的父路径       os.path.abs(os.path.dirname(path)+os.path.sep+".")
获取脚本文件对应的前两级路径   os.path.abs(os.path.dirname(path)+os.path.sep+"..")

############################框架驱动程序#####################################
v1.0在配置文件中写入一个测试文件进行执行 
    设计一个配置文件  脚本名称 路径
    读取配置文件
    找到对应的脚本进行调用
    工作小结：
    工作思路：由简到繁 
    发现问题：添加print语句进行分析  问题 ：路径不一致 级别发生了变化
     
       
v2.0 在配置文件中针对不同的运行状态进行文件的执行 
    是否运行
v3.0  根据排序运行  测试驱动框架获取脚本排序
    把文件名和执行顺序放入字典中
    对字典数据进行排序
    读取字典内容传入驱动程序
v4.0
v5.0
脚本设计思路
突破点：数据字典的paixuimport operator

