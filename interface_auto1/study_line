初识接口 原理分析  脚本研发项目实践 测试框架和设计实践 工作总结（最重要）

******************************接口测试实验任务小结******************************
######实验的需求：俩个整数之和

#####实验的目标：
1.what?  了解接口
2.why?   为什么进行接口测试？接口测试与其他自动化的区别？
3.what?  接口测试的原理
4.how?   接口测试的基本流程

#####工作小结：
#了解接口？
1.接口的主要组成元素
接口请求地址  请求方法 接口参数  接口返回值
2.接口的作用
规定了一些规则
规定好使用规则后，方便其他应用调用
保护程序内部的安全性
程序内部的变化对外部使用者没有任何影响

#为什么进行接口测试？接口测试与其他自动化的区别？
1.为什么要进行测试工作？

    1)必备的工作
        软件中存在很多接口 
        软件系统调用了其他系统接口
    2)提早开展测试
        接口只要定义好了，没有界面也是可以进行测试，通过接口测试工具或写接口测试代码
    3)早一点发现bug
        bug修复成本和风险大大下降
    4)提前确定接口是否正常实现
    5)早一点定位bug 
2.接口测试与其他自动化的区别?

    1.接口测试和UI测试的区别：原理不同
        UI:  元素定位 模拟手工操作   输入测试数据     获取输出结果
        接口：        模拟发送请求   传入接口数据     获取响应结果
    2.接口测试和性能测试的区别：目标不同
        接口：接口输入参数是否进行校验    响应结果是否符合接口设计要求
        性能：大数据量或大用户量访问时 系统能否正常工作 系统处理响应时间  服务器资源占用情况（cpu,内存，硬盘，网络）
    3.接口测试和单元测试的区别：对象不同
        单元：独立的代码内部逻辑是否正确
        接口：接口的实现和接口之间的调用是否正确

#接口测试的原理
1.协议：定义了在网络上进行数据传输的规则

    http协议的请求：
    请求行     方法         URL         版本
    请求头     头部域名称   头部域值
    空行
    消息主体   请求数据
    
    http协议的响应：
    请求行       版本         状态码     原因短语
    请求头       头部域名称   头部域值
    空行
    消息主体     响应正文

2.协议与接口的关系
    通过分析协议数据包来获取接口测试内容：请求地址/请求方法/接口参数/接口返回值
3.用什么进行抓接口数据包
    抓包工具（Fiddler/Wireshark/firebug/Httpwatch）
    
#接口测试的基本流程
1.准备接口测试环境
    被测环境部署
    测试环境部署  python pycharm  抓包工具（Fiddler/Wireshark/firebug/Httpwatch）
2.准备接口测试用例
3.确定接口测试数据相关需求
4.实现接口测试
    1.通过接口测试工具
    2.编写接口测试脚本
    3.设计并研发接口测试框架
5.发现bug,提交bug单
6.回归测试，修复bug

####思考题：
功能测试.j接口测试。单元测试/性能测试如何有效安排，统筹规划？
1.状态码？
1xx
2xx
3xx
4xx
5xx

******************************公司内部项目******************************
#接口测试准备工作
1.了解项目背景
    项目的应用范围（用户信息处理相关接口）
    接口测试的范围（接口的个数/名字/接口调用/参数/返回值）
    相关开发负责人和开发工程师
    项目的进度（决定测试工作的紧急程度）
2.收集项目相关资料
    接口说明文档/接口设计
    接口代码说明文档
    与开发沟通确认，生成测试成果物（测试说明，包括接口名称，请求地址，参数，返回值，方法）
    接口测试环境相关资料（部署环境文档/布署环境安装包）
    语言环境JDK 服务器Tomcat 数据库MySQL 接口测试工具Postman 抓包工具Fiddler
    1.搭建JDK（环境变量） JAVA HOME 和path    java -version
    2.Tomcat   解压后将.war包放进webapps中，双击startup.exe http://localhost:8080
    3.MySQL  安装数据库服务器端（root/123456)/客户端工具 导入数据库文件 数据库服务开启
    4.Postman Fiddler  通过postman访问接口

3.部署接口测试环境
4.接口测试相关成果物
5.接口测试采用的工具和技术
6.测试工作分工

#独立接口测试

1.确定
2.目标
    1.测试范围：用户模块
    2.测试标准:
    最低：正确的请求地址+正确的参数  获取正常的返回值
    正常：正常接口测试  同最低标准
          异常接口测试  接口参数异常校验（参数为空，类型/长度/内容不正确）
    较高：
        接口安全性测试  通过抓包工具能否获得关键敏感数据      
        接口性能测试    大量用户同时访问接口时接口响应时间
        接口兼容性测试  对外提供服务要考虑接口的使用范围（web/app)
    3.测试文档
        接口测试范围
        接口测试说明（等同接口测试用例）
        接口测试脚本
        接口测试框架
        接口测试的bug单
    4.测试方法
        1.postname+fiddler工具进行接口执行（尽快确认接口功能是否正常使用） 最低标准
        2.针对异常接口参数，先进行手工+工具测试
        3.后期bug基本修复成功了，代码稳定了，追加编写接口测试脚本，进行接口自动化回归测试
    5.测试分工  
    
3.第一阶段
    1.目标：确定接口功能是否正常实现
    2.方法：使用postman工具执行基本接口测试
    3.工作准备
    已完成所有接口测试说明文档并评审通过
    设定接口执行顺序（注册/登录...)
4.工作任务：
    1.接口说明文档1.0
    2.使用postman工具执行正常测试并记录测试结果 不清楚的先写下来

脚本及实现   
接口测试脚本实验1
    导入类库文件   
    v1.0 发送请求，获取响应结果
        定义接口请求地址
        通过requests对象调用post方法发送请求，并接受响应
        调试脚本
    v2.0 传入接口测试数据  
        定义字典类型进行接口参数赋值
        传入post方法中
        进行
    v3.0 对结果进行校验，得出测试结论
        调用find方法，查找返回的字符串是否存在对应的值
        判断语句得出测试结论
    v4.0 从文件中传入多组测试数据
        准备CSV文件
        读取csv文件中的测试数据（只读+循环）
        把测试数据放入字典中 
    v5.0 把每一组测试数据对应的测试结果放入测试报告中
        创建一个可写入的文件file2=open("","w")
        向文件中写入内容 file2.write("zhangsan"+","+"lis")
    如何把多个版本的程序进行迭代
        导入类库文件
        测试准备工作  打开文件，url,文件的读取
        接口测试执行 通过循环结构 读取一组测试数据进行测试执行，将测试结果进行分析，写入测试报告
接口测试脚本实验2
     面向对象思想设计正常注册接口测试
     
接口测试脚本实验3
属性 方法
     工作小结
     面向对象设计思路
        一个接口测试对应一个类文件
        接口请求地址作为属性
        测试数据如果时固定的也可以作为属性
        测试方法  发送请求  获取响应 比对结果
        在main方法中进行类的实例化
#复杂接口测试  
接口联调测试，就是按照业务要求，把接口进行组合测试
1.项目中的接口是多个
2.接口组合起来才能实现完整的业务
3.接口之间有些存在依赖关系

工作计划：
业务分析-》测试设计（先后顺序）-》使用postman工具-》编写测试脚本 -》工作总结

接口联调业务分析
1.对所有接口有一个全局认识
接口名称 功能 参数  返回值  列一个表格 
接口联调测试设计     用户找回密码业务
注册 登录 忘记密码 提交密保问题提示接口  
接口联调使用postman工具
token？
web应用程序如何进行身份验证？
http协议是无状态协议（无记忆）
虽然已登录成功，但重新打开一个页面后，相当于重新发送新的请求，服务器就无法判断用户是否登录
解决办法：
1.通过cookie文件登录保存用户的身份信息
在浏览器本地生成或更新cookie文件 发请求时会带上cookie 加密存储，可以删除，删除后重新登录再次生成 
有些系统也会通过cookie记录一些用户的操作习惯
2.通过session保存用户的相关信息  
登录后服务器校验用户合法后，会产生一个随机的session id发送给客户端，客户端随后发出的请求都会带上session id  
    有时效性，一般30分中，在代码中设计和实现  重新登录  访问新页面 session id 是否有效 
3.通过token保存用户的相关信息  
登录后服务器校验用户合法后，产生一个随机token令牌给客户端，访问新页面
      时效性    支持多平台
session只能在一个系统中使用，token可支持访问第三方网站或系统

接口测试的关系
接口说明参数  cookie session  token 

接口联调编写测试脚本
1.类的设计
一个接口一个类  （接口比较少）
一个接口一个方法 一个类对应多个测试方法  
2.接口脚本实现
3.一个接口进行一次调试

案例：
定义一个类 五个方法  一个方法对应一个接口测试 
参数 url接口请求地址 接口参数  返回值（只考虑正常接口数据的测试）
注意：提交密保问题答案接口的返回值 是 回答完密保问题后修改密码接口的输入参数

接口类图和接口流程图设计
工作总结
1.前期准备
所有接口的联调分析文档  请求地址 传入参数 预期响应结果
只进行正常数据的接口测试
2.脚本设计
类图  一个类多个方法  一个方法一个接口
流程图
3.脚本实现
定义类
定义一个方法调试一个
4.脚本调试
print打印中间数据 
5.如果发现bug，及时提交bug单和开发进行确认

接口联调测试脚本优化
v1.0
v2.0
共性：url/userinfo/预期输出都需要进行比对
结构优化价值：
大大提高了测试脚本的复用性 
降低了测试脚本的维护成本，只需要不断追加或替换相关的测试数据即可 
方便后续接口测试工作的扩展及测试执行
如何？
优化测试脚本类的设计
对通用的接口测试方法需要传入参数（url,接口参数，预期值，接口名称）
再依据接口测试说明传入相关的参数值
适用范围？
1.接口测试没有返回值，也没有特殊参数
2.接口请求方式一致
v3.0 再不同的python文件中进行接口模板列的实例化和调用
适合：多个接口测试开发工程师，同时编写不同的接口测试脚本，进行接口测试的执行
步骤？
1.创建
2.导入
3.main
v4.0脚本参数化
将参数放入csv文件
通过程序读取参数
传入接口测试脚本
v4.1解决相同参数的读取问题
v4.2参数个数不同的读取问题
1.准备数据文件
2.创建一个python文件
3.设计一个方法读取参数数据
4.传入参数
小结：脚本参数化
1.找到参数的规律
共同的参数：url/预期响应结果/接口名称
个性的参数：接口参数数据不同  循环规律：初始值 终止值 每次变化几个
存放入字典  
一次循环后要把字典清空 
价值：
以后的接口测试，只需要维护测试数据的文档，不需要修改代码
v5.0 编写接口测试报告
1.需要把几口响应结果和结论存入测试报告
2.测试报告设计  
接口名称 接口实际返回值 测试结论  
3.技术实验  字典数据
将字典数据写入csv文件中
resultdata={"实际返回值":response,"测试结论":"测试通过"，"接口名称":""}
每完成一组写入一条记录 
w   main方法
 a  单独写一个方法
 v6.0 
 1.一个脚本的程序可以对应若干条接口测试
 2.只需要维护测试数据就可以完成任意组接口的测试
 3.所有接口测试的结论自动生成测试报告文件
 
#接口联调测试工作总结
1.价值
2.工作思路
3.准备工作
4.
 #接口测试框架
#工作总结


